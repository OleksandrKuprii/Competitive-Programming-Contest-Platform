POST http://localhost:3000/api/submission HTTP/1.1
content-type: application/json

{
    "user_id": 2,
    "task_id": 2,
    "lang": "python3",
    "code": "with open('input.txt') as f:\n    a, b, n, m = map(int, f.read().split())\nyarik = a * m + b * m\nmyr = a * m + b * n\nif yarik > myr:\n    res = 1\nelif myr > yarik:\n    res = 2\nelif yarik == myr:\n    res = 0\nwith open('output.txt', 'w') as f:\n    f.write(str(res) + '\\n')"
}

###
POST http://localhost:3000/api/submission HTTP/1.1
content-type: application/json

{
    "user_id": 1,
    "task_id": 2,
    "lang": "python3",
    "code": "with open('input.txt') as input_file:\n a, b, n, m = map(int, input_file.read().split())\n\n yaroslav = a * n + b * m\n miroslava = a * m + b * n\n\n with open('output.txt', 'w') as output_file:\n  output_file.write('0\\n' if yaroslav == miroslava else '1\\n' if yaroslav > miroslava else '2\\n')"
}

###

POST http://localhost:3000/api/submission HTTP/1.1
content-type: application/json

{
    "user_id": 1,
    "task_id": 3,
    "lang": "python3",
    "code": "with open('input.txt') as f:\n    n = int(f.readline())\n    stamps = list(map(int, f.readline().split()))\n\nstamps.sort()\n\nfor stamp in stamps[1:]:\n    yarik = [stamps[0]]\n    myr = []\n    start = stamps[0]\n    if stamp + stamp - start in stamps:\n        delta = stamp - start\n        for x in stamps[1:]:\n            if yarik[-1] + delta == x:\n                yarik.append(x)\n            else:\n                myr.append(x)\n        if len(yarik) == n:\n            break\n\nwith open('output.txt', 'w') as f:\n    f.write(' '.join(map(str, yarik)) + '\\n')\n    f.write(' '.join(map(str, myr)) + '\\n')\n"
}

###

POST http://localhost:3000/api/submission HTTP/1.1
content-type: application/json

{
    "user_id": 1,
    "task_id": 4,
    "lang": "python3",
    "code": "with open('input.txt') as f:\n    n = int(f.readline().split()[0])\n\n    matrix = []\n    for i in range(n):\n        matrix.append([])\n        for _ in range(n):\n            matrix[i].append(1)\n        matrix[i][i] = 0\n\n\n    for x in f.readlines():\n        i, j = map(lambda x: int(x) - 1, x.split())\n        matrix[i][j] = 0\n        matrix[j][i] = 0\n\ndef cycle(data):\n    for i in data.copy():\n        data.remove(i)\n        for j in data:\n            if matrix[i][j] == 0:\n                return False\n    return True\n\n\ndef find_neighbours(v):\n    res = []\n    for i in range(len(matrix[0])):\n        if matrix[v][i] == 1:\n            res.append(i)\n    return res\n\n\ndef find_all_chains(data, chain):\n    for x in set(find_neighbours(chain[-1])) & set(data):\n        if cycle(chain + [x]):\n            if cycle(set(range(n)) - set(chain + [x])):\n                return sorted(chain + [x]), set(range(n)) - set(chain + [x])\n            return find_all_chains(data, chain + [x])\n        else:\n            continue\n\n\nstart_vertex = 0\n\narray = [start_vertex]\nfor i in range(len(matrix[start_vertex])):\n    if matrix[start_vertex][i] == 1:\n        array.append(i)\n\nif cycle(array.copy()) and cycle(set(range(n)) - set(array)):\n    if 0 in array:\n        res = ' '.join(map(lambda x: str(x + 1), sorted(array))) + '\\n' + ' '.join(map(lambda x: str(x + 1), set(range(n)) - set(array))) + '\\n'\n    else:\n        res = ' '.join(map(lambda x: str(x + 1), set(range(n)) - set(array))) + '\\n' + ' '.join(map(lambda x: str(x + 1), sorted(array))) + '\\n'\nelse:\n    if len(array) == 1:\n        res = '0\\n0\\n'\n    else:\n        a, b = find_all_chains(array, [0])\n        if 0 in a:\n            res = ' '.join(map(lambda x: str(x + 1), a)) + '\\n' + ' '.join(map(lambda x: str(x + 1), b)) + '\\n'\n        else:\n            res = ' '.join(map(lambda x: str(x + 1), b)) + '\\n' + ' '.join(map(lambda x: str(x + 1), a)) + '\\n'\n\nwith open('output.txt', 'w') as f:\n    f.write(res)\n"
}

###
