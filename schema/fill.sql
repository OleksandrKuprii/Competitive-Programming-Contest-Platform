INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (1, 'comics', 'Комікси', null, 1, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (2, 'coins', 'Монети', null, 3, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (3, 'stamps', 'Марки', null, 5, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (4, 'wrappers', 'Фантики', null, 7, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (5, 'shelters', 'Укриття', null, 1, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (6, 'poles', 'Стовпчики', null, 3, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (7, 'parking', 'Паркування', null, 5, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (8, 'streets', 'Вулиці', null, 7, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (9, 'cpu', 'Процесор', null, 1, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (10, 'mouse', 'Миша', null, 3, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (11, 'keyboard', 'Клавіатура', null, 5, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (12, 'monitor', 'Монітор', null, 7, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (13, 'cards', 'Карти', null, 1, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (14, 'ttt', 'Хрестики-нулики', null, 3, 1000, 1000, 256);
INSERT INTO coreschema.tasks (id, alias, name, category, difficulty, wall_time_limit, cpu_time_limit, memory_limit) VALUES (15, 'bac', 'Бики та корови ', null, 5, 1000, 1000, 256);

INSERT INTO coreschema.tests (points, task_id) VALUES (10, 1);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 1);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 1);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 1);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 1);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 1);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 1);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 1);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 1);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 1);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 2);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 2);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 2);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 2);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 2);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 2);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 2);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 2);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 2);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 2);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 3);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 3);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 3);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 3);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 3);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 3);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 3);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 3);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 3);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 3);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 4);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 4);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 4);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 4);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 4);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 4);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 4);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 4);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 4);
INSERT INTO coreschema.tests (points, task_id) VALUES (10, 4);

INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (1, 'comics', 'Ярослав і Мирослава колекціонують комікси. Ярослав має **_a_** коробок по **_n_** коміксів у кожній та **_b_** коробок по **_m_** коміксів у кожній, а Мирослава — **_a_** коробок по **_m_** коміксів у кожній та **_b_** коробок по **_n_** коміксів у кожній. У кого з дітей коміксів більше?', 'У вхідному файлі через пробіл вказано чотири числа: **_a_**, **_b_**, **_n_** та **_m_** (саме в такому порядку). Усі чотири числа натуральні та не перевищують 10 000.', 'У вихідний файл виведіть 1, якщо більшу кількість коміксів має Ярослав; 2, якщо більше коміксів у Мирослави; 0, якщо Ярослав та Мирослава мають однакову кількість коміксів.', 'Ярослав має 2 × 5 + 3 × 4 = 22 комікси, а Мирослава — 2 × 4 + 3 × 5 = 23 комікси, тобто на один комікс більше, ніж Ярослав.');
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (2, 'coins', 'Ярослав та Мирослава мають спільну колекцію з **_n_** монет. Як символ своєї дружби вони хочуть окремо зберігати таку пару монет, що в сумі номінальна вартість цих двох монет дає особливе число **_s_**. Підрахуйте кількість різних способів вибрати потрібну пару.', 'У першому рядку вхідного файлу вказано натуральні числа **_s_** та **_n_**, не менші за 2. У другому рядку записано **_n_** натуральних чисел — номінальні вартості монет із колекції. Усі числа у вхідному файлі (включно з числами **_s_** та **_n_**) не перевищують 200 000.', 'У вихідний файл виведіть єдине число — кількість способів вибрати дві монети з сумарною номінальною вартістю **_s_**. Відомо, що шукана кількість не перевищує 10<sup>9</sup>.', 'У першому прикладі діти можуть вибрати пару в один із чотирьох способів: взяти першу і другу монети; або першу й четверту; або другу й четверту; або третю та п’яту.\n\nУ другому прикладі жодні дві монети, на жаль, не дають у сумі вартість 10.');
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (3, 'stamps', 'Нещодавно на уроці математики Ярослав і Мирослава вивчили, що арифметичною прогресією називають послідовність чисел, у якій різниця між кожними двома сусідніми членами однакова. А невдовзі після того діти дізналися, що на честь ювілею математичного товариства столиці було випущено дві серії марок. Кожна серія складається з **_n_** марок різної номінальної вартості, і ці **_n_** номіналів утворюють арифметичну прогресію. Для своєї колекції марок Ярослав придбав одну з цих серій, а Мирослава — іншу. Однак, роздивляючись придбання одне одного, діти ненароком перемішали всі марки.\n\nЗнаючи номінали марок — 2**_n_** попарно різних чисел, — допоможіть дітям розділити марки на дві серії. Відомо, що це можна зробити рівно в один спосіб.', 'У першому рядку вхідного файлу вказано натуральне число **_n_** — кількість марок у серії, 3 ⩽ **_n_** ⩽ 100 000. У другому рядку записано 2**_n_** різних натуральних чисел, менших за 10<sup>9</sup>, — перемішані номінали марок.', 'У перший рядок вихідного файлу виведіть в порядку зростання всі номінали марок Ярославової серії, а в другий рядок — усі номінали марок Мирославиної серії (так само в порядку зростання). Діти пам’ятають, що найдешевша марка Ярослава має менший номінал, ніж найдешевша марка Мирослави.', 'Виведені у вихідний файл послідовності утворюють шукані серії марок, адже є арифметичними прогресіями: 9 − 2 = 16 − 9 = 23 − 16 та 7 − 3 = 11 − 7 = 15 − 11. Серії виведено в правильному порядку, бо 2 < 3.');
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (4, 'wrappers', 'За останній час Ярослав і Мирослава назбирали разом **_n_** фантиків. Як відомо, кожен колекціонер прагне, щоб його колекція була максимально розмаїтою. Тому діти хочуть розподілити між собою фантики так, щоб жодні два чимось схожих між собою фантики не потрапили до одного власника. Для цього Ярослав та Мирослава занумерували фантики числами від 1 до **_n_** та виписали, які саме пари фантиків виглядають подібно. Усього в них вийшло **_m_** пар, причому номери деяких фантиків могли бути виписані в кількох різних парах.\n\nДопоможіть дітям розподілити фантики бажаним чином або визначте, що це неможливо.', 'У першому рядку вхідного файлу вказано два натуральних числа 𝑛 та 𝑚 — кількість фантиків та кількість їх подібних пар; 2 ⩽ **_n_** < 2000, 1 ⩽ **_m_** < 450 000. У кожному з наступних **_m_** рядків задано по два числа **_a<sub>i</sub>_** а **_b<sub>i</sub>_** — номери схожих між собою фантиків, 1 ⩽ **_a<sub>i</sub>_** **_< b<sub>i</sub>_** ⩽ **_n_**, 1 ⩽ **_i_** ⩽ **_m_**. Жодна пара номерів **_a<sub>i</sub>_**, **_b<sub>i</sub>_** у вхідному файлі не повторюється. Крім того, вхідні дані гарантують, що є не більше ніж один спосіб розподілити фантики між дітьми, щоб жодні два схожих між собою фантики не опинилися в одного власника.', 'У першому рядку вихідного файлу виведіть у порядку зростання номери фантиків, які мають опинитися в того ж власника, що й фантик під номером 1 (включно з самим числом 1 ). У другому рядку виведіть у порядку зростання номери фантиків, які повинні опинитися в іншого власника.\n\nЯкщо жоден розподіл фантиків не задовольняє умову задачі, в обох рядках виведіть по нулю.', null);
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (5, 'shelters', 'Уявіть, що вас, як людину з умінням мислити логічно й гарними навичками програмування, найняли покращувати благоустрій міста. Першим і одним з найвідповідальніших ваших завдань є забезпечення максимальної безпеки його мешканців.\n\nУ місті проживає **_p_** осіб і вже є **_n_**  укриттів, що здатні вмістити по **_m_** людей кожне. Допоможіть з’ясувати, яку найменшу кількість таких самих укриттів необхідно добудувати, щоб у разі потреби усі мешканці могли водночас сховатися від небезпеки.', 'У єдиному рядку вхідного файлу задано додатні цілі числа **_p_**, **_n_** і **_m_**, кожне з яких не перевищує 180.', 'У вихідний файл виведіть кількість укриттів, які необхідно добудувати для повної безпеки міста. Якщо місця на всіх його мешканців вистачає і так, виведіть нуль.', 'У першому прикладі сімох укриттів не вистачить, щоб прихистити всіх жителів міста: 7 × 7 < 52. А от восьми укриттів буде вже достатньо — залишається до існуючих трьох добудувати ще п’ять. У другому прикладі місця в укриттях на всіх мешканців вистачає відразу.');
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (6, 'poles', 'Дуже важливою у міському побуті є й культурна складова. На центральній галявині нового парку, який невдовзі буде відкрито в центрі міста, планують розмістити коло зі стовпів різної висоти, що умовно зображають його населення. У центрі галявини установлять стовпчик, який символізуватиме рівність і баланс: його висота за задумом скульпторів має дорівнювати середньому арифметичному висот усіх стовпчиків навколо. Знаючи висоти всіх стовпів, що установлять у парку, допоможіть вибрати з них стовпчик, який можна було б поставити у центрі.', 'У першому рядку вхідного файлу вказано кількість стовпчиків **_n_**; ця кількість є натуральним числом, що лежить у межах від 3 до 10<sup>5</sup> включно. У наступному рядку задано висоти 𝑛 стовпчиків: кожна висота — натуральне число, менше за 10<sup>9</sup>.', 'У вихідний файл виведіть висоту стовпчика, яка дорівнює середньому арифметичному усіх інших висот із вхідного файлу. Вхідні дані гарантують, що така висота дійсно існує і притому єдина.', 'Якщо прибрати з набору будь-який один із двох стовпчиків заввишки 4, середнє арифметичне висот решти стовпів якраз дорівнюватиме (2 + 2 + 4 + 5 + 7)/5 = 4');
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (7, 'parking', 'Поки що ваше місто складається з єдиної прямої вулиці, уздовж якої розташовано **_n_** будинків. Нещодавно перед містянами постала проблема з паркуванням, і було вирішено наземні стоянки переобладнати під велосипедні, а всі стоянки для машин перенести під землю — побудувати вздовж вулиці по одному підземному паркуванню для кожного будинку. З міркувань безпеки та зручності будівництва визначено, якими мають бути точні відстані між кожними двома сусідніми паркуваннями. Але самі паркування необхідно при цьому розташувати так, щоб сума відстаней між кожним із будинків та його відповідним паркуванням була найменшою можливою.\n\nПаркування можна розміщати як безпосередньо під будинком, якому воно належить, так і в довільному іншому місці вздовж вулиці. Вулиця є достатньо довгою, тож ті чи інші паркування за потреби можна розміщати як завгодно далеко від будинків.\n\nВаше завдання — за інформацією про розташування будинків і відстанями між кожними двома сусідніми паркуваннями визначити найменшу можливу сумарну відстань від будинків до відповідних паркувань.', 'У першому рядку вхідного файлу задано натуральне число **_n_** — кількість будинків (і паркувань, які необхідно побудувати). Відомо, що 2 ⩽ **_n_** ⩽ 10<sup>5</sup>.\n\nУ другому рядку в порядку зростання перераховано **_n_** цілих чисел, що задають розташування будинків: число нуль (якщо воно є серед чисел) відповідає точці відліку; від’ємні числа (якщо такі є) відповідають будинкам на захід від цієї точки; додатні числа (якщо є) відповідають будинкам на схід від неї; абсолютна величина числа задає відстань від будинку до точки відліку. Усі числа, що задають розташування будинків, за абсолютним значенням не перевищують 10<sup>9</sup>, і жодні два з цих чисел не збігаються.\n\nУ наступному рядку вказано **_n_** − 1 натуральне число: перше з них задає відстань між лівим (найзахіднішим) паркуванням **_A_** та сусіднім до нього справа паркуванням **_B_**; друге число задає відстань між паркуванням **_B_** та сусіднім до нього справа паркуванням **_C_** і т. д. Усі числа в цьому рядку не перевищують 10<sup>4</sup>.\n\nПерше (найзахідніше) паркування належатиме першому (найзахіднішому) будинку, друге паркування — другому будинку і т. д.', 'У вихідний файл виведіть ціле число — найменшу можливу суму відстаней від кожного будинку до його паркування. Вхідні дані гарантують, що ця сума не перевищить 10<sup>9</sup>.', 'Паркування можна побудувати, наприклад, у позиціях −5, 0, 10 і 14. Тоді сумарна відстань до будинків складатиме |−5 − (−2)| + |0 − 1| + |10 − 8| + |14 − 13| = 7. Будь-яке інше розташування паркувань дасть або таку саму, або більшу сумарну відстань.');
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (8, 'streets', 'У планах розбудови міста — відкрити кілька нових площ і між деяками парами цих площ прокласти прямі дороги з двостороннім рухом (можливо, з використанням мостів над іншими дорогами).\n\nВаша задача — розбити нові дороги на якомога меншу кількість вулиць так, щоб кожна дорога належала рівно одній вулиці. Вулицею може бути довільна послідовність доріг, у якій дороги не повторюються і кожна наступна дорога починається з тієї площі, де завершилася попередня. Зверніть увагу, що вулицям дозволено перетинати себе та замикатися у коло.', 'У першому рядку вхідного файлу вказано два натуральних числа — кількість нових площ **_n_** та кількість нових доріг **_m_**. Кількість площ не перевищує 800, і між кожною парою площ буде прокладено не більше ніж одну дорогу. Усі площі занумеровано натуральними числами від 1 до **_n_**.\n\nНаступні **_m_** рядків задають дороги: у кожному рядку вказано по два числа — номери площ, які сполучає відповідна дорога, причому спочатку йде менший з двох номерів, а потім більший. Жодні два рядки не задають одну й ту саму дорогу. Крім того, з кожної площі виходить принаймні одна дорога.', 'У вихідний файл виведіть найменшу кількість вулиць, на які можна розбити нові дорогі.', 'Одну з вулиць можна прокласти за маршрутом 2 — 1 — 3, іншу за маршрутом 4 — 1 — 5, третю — між площами 6 і 7.');
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (9, 'cpu', null, null, null, null);
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (10, 'mouse', null, null, null, null);
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (11, 'keyboard', null, null, null, null);
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (12, 'monitor', null, null, null, null);
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (13, 'cards', 'Якось, граючи у карти, Нетямко помітив, що в нього на руці вісім різних карт червової масті: є всі карти від двійки до десятки за винятком однієї. Допоможіть Нетямку визначити, якої саме карти бракує.', 'У вхідному файлі у довільному порядку задано вісім різних натуральних чисел у межах від 2 до 10.', 'У вихідний файл виведіть натуральне число у межах від 2 до 10 — карту червової масті, якої бракує.', null);
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (14, 'ttt', 'У хрестики-нулики грають на полі 3 × 3 двоє гравців, що ходять по черзі. Перший гравець ставить хрестик у довільну клітинку поля; його суперник ставить нулик у будь-яку іншу клітинку; перший гравець ставить ще один хрестик у будь-яку незайняту клітинку; далі його суперник ставить нулик і т. д. Виграє той, після чийого ходу деякі три хрестики або три нулики стоятимуть на одній горизонталі, на одній вертикалі чи на одній з двох діагоналей поля. Якщо всі клітинки поля вже зайнято, але жодні три хрестики або нулики не займають однієї горизонталі, вертикалі чи діагоналі, вважають, що гра завершилась унічию.\n\nЯкось Нетямко грав у хрестики-нулики з товаришем і замислився: чи не час закінчувати поточну партію, а якщо так, то хто виграв? Допоможіть хлопцю знайти відповіді на ці питання.', 'Вхідний файл складається з трьох рядків, у кожному з яких міститься по три символи з набору: **x** (мала латинська літера **x**, що позначає хрестик), o (мала латинська літера **o**, що позначає нулик), **.** (крапка, що позначає порожню клітинку). Символи пробілами не розділено. Вхідні дані задають коректну позицію гри у хрестики-нулики (можливо, й початкову, коли ще не зроблено жодного ходу).', 'У вихідний файл виведіть єдиний символ (не забувши про перенесення рядка):<ul><li>**x** — малу латинську літеру _x_, — якщо гра вже закінчилася і виграли хрестики;</li><li>**o** — малу латинську літеру _o_, — якщо гра вже закінчилася і виграли нулики;</li><li>**=** — знак рівності, — якщо гра закінчилася внічию;</li><li>**.** — крапку, — якщо гра ще не закінчилася.</li></ul>', null);
INSERT INTO coreschema.task_descriptions (task_id, alias, main, input_format, output_format, explanation) VALUES (15, 'bac', 'Правила гри в бики й корови такі. Гравець задумує довільне чотирицифрове (від 1000 до 9999) число, усі цифри якого різні; суперник намагається задумане число відгадати, висуваючи гіпотези: він поступово називає різні чотирицифрові числа, що також не містять однакових цифр. На кожну гіпотезу суперника гравець, що задумав число, повинен відповісти — вказати кількість угаданих суперником цифр: ті вгадані цифри, що стоять на правильних місцях, називаються биками, а ті, які є в задуманому числі, але стоять на інших позиціях, називаються коровами. Наприклад, якщо задумано число 7183, а названо 8123, то гравець, що задумував число, відповість «два бики та одна корова» (два бики — цифри 1 і 3, що стоять на своїх місцях, а корова — цифра 8, що стоїть не там, де треба).\n\nЯкось, граючи з товаришем, Нетямко спитав у нього про **_n_** чисел, ретельно записав відповіді про кожне з них і був уже близький до перемоги, але зненацька його записи розсипалися й Нетямко заплутався, яка відповідь товариша відповідала якому названому Нетямком числу. Спираючись на переплутані записи, допоможіть Нетямку вгадати, яке число задумав його товариш.', 'У першому рядку вхідного файлу вказано натуральне число **_n_**. У наступних 𝑛 рядках міститься по одному чотирицифровому числу, про яке Нетямко питав у товариша (всі числа різні). У наступних **_n_** рядках записано по два цілих числа — відповіді товариша: перше число — кількість биків, а друге число — кількість корів у  деякому з чисел, про які питав Нетямко. Зверніть увагу, що набір з **_n_** чисел відповідає набору з **_n_** відповідей у деякому переплутаному порядку.', 'У вихідний файл виведіть задумане товаришем Нетямка число. Відомо, що це число можна відновити однозначно і воно не збігається з жодним із чисел, заданих у вхідному файлі.', 'Назвавши число 4712, Нетямко дістав відповідь «один бик і дві корови».\n\nНазвавши число 8796, Нетямко отримав відповідь «два бики і жодної корови».\n\nНазвавши число 3261, Нетямко дістав відповідь «жодного бика і три корови».\n\nПотім рядки в його записах переплуталися.');

INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (1, 'comics', '2 3 5 4', '2');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (2, 'coins', '4 5\n2 2 3 2 1', '4');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (2, 'coins', '10 3\n6 2 10', '0');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (3, 'stamps', '4\n7 9 23 3 16 15 11 2', '2 9 16 23\n3 7 11 15');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (4, 'wrappers', '5 6\n2 5\n2 3\n1 5\n4 5\n3 4\n1 3', '1 2 4\n3 5');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (4, 'wrappers', '3 3\n1 2\n2 3\n1 3', '0\n0');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (5, 'shelters', '52 3 7 ', '5');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (5, 'shelters', '35 7 5 ', '0');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (6, 'poles', '6\n2 5 4 2 4 7', '4');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (7, 'parking', '4\n-2 1 8 13\n5 10 4', '7');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (8, 'streets', '7 5\n1 2\n1 3\n1 5\n6 7\n1 4', '3');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (13, 'cards', '6 3 10 9 2 8 4 5 ', '7');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (14, 'ttt', '..x\nox.\nx.o', 'x');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (14, 'ttt', 'ooo\n.x.\nxx.', 'o');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (14, 'ttt', 'x.x\nxoo\noxo', '.');
INSERT INTO coreschema.task_examples (task_id, alias, input_data, output_data) VALUES (15, 'bac', '3\n4712\n8796\n3261\n2 0\n0 3\n1 2', '1726');